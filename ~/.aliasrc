#######################
# Functions & Aliases #
#######################

#alias ..="cd .."

# Detect OS type
if [ "$(uname)" = "Darwin" ]; then
    _os=osx
elif [ "$(expr substr $(uname -s) 1 5)" = "Linux" ]; then
    _os=linux
elif [ "$(expr substr $(uname -s) 1 10)" = "MINGW32_NT" ]; then
    _os=windows
fi

# ------------------------------------------------------------------------------
# Portable ls with colors
if ls --color -d . >/dev/null 2>&1; then
    alias ls='ls --color=auto'  # Linux
    # alias ls="ls --color=tty"
elif ls -G -d . >/dev/null 2>&1; then
    alias ls='ls -G'  # BSD/OS X
fi

alias la="ls -ah"
alias ll="ls -lh"
alias l='ll -a'
alias l.="ls -dh .*"

# Git
alias g="git"
alias gva="git status"
alias gv="gva ."
alias gda="git diff"
alias gd="gda ."
alias gdao="gda --cached"
alias gdo="gdao ."
alias ga="git add"
alias gap="ga -p"
alias gaa="ga --all"
alias gc="git commit"
alias gcm="gc -m"
alias gu="git push"
alias gut="gu --tags"
alias guf="gu -f"
alias gl="git pull"
alias gls="gl --rebase"
alias gs="git rebase"
alias gss="gs --skip"
alias gsc="gs --continue"
alias gsa="gs --abort"
alias glo="gl origin"
alias go="git checkout"
alias ge="git merge"
alias gr="git remote"
alias gb="git branch"
alias gbu="git branch --set-upstream-to "
alias gt="git tag"
alias gf="git fetch"
alias gg="git log"
alias gk="git cherry-pick"
alias gw="git show"
alias gw^="gw HEAD^"
alias gw^^="gw HEAD~2"
alias gw^^^="gw HEAD~3"
alias gw^^^^="gw HEAD~4"
alias gfg="git config --global"

function tgcm() {
    GIT_AUTHOR_DATE=$1 GIT_COMMITTER_DATE=$1 gcm "$2" --date $1
}

if command -v complete > /dev/null;
then
    # Enable completion for aliases
    complete -o default -o nospace -F _git_branch gb
    complete -o default -o nospace -F _git_checkout go
fi

# NPM
alias nu="npm update"
alias ni="npm i"
alias ns="npm run"
alias np="npm publish"

# Composer
alias cu="composer update"
alias ci="composer install"
alias cr="composer require"
alias cs="composer run-script"

# Docker
alias dv="docker ps"
alias dva="docker ps -a"
alias dn="docker run"
alias de="docker exec"
alias dei="docker exec -it"
alias ds="docker start"
alias dr="docker restart"
alias dt="docker stop"
alias drm="docker rm"
alias db="docker build"
alias dbt="docker build -t"

# docker-compose
alias dcs="docker-compose -p \${PWD//\//-}"
alias dcsb="dcs build"
alias dcsu="dcs up -d"
alias dcsd="dcs down"

# ------------------------------------------------------------------------------
# Reload the shell (i.e. invoke as a login shell)
alias reload="exec ${SHELL} -l"

# Print each PATH entry on a separate line
alias path='echo -e ${PATH//:/\\n}'

alias netports="netstat -tulpn"

# grep process:
alias psgrep="ps aux | head -n1; ps aux | grep -v grep | grep --color -i"

# psmem [-g grep] [-u user] ... [-c] command
# @author DUzun.Me
function psmem() {
    local help
    local cmd
    local user
    local grep
    local POSITIONAL=()

    # Parse parameters
    while [[ $# -gt 0 ]]; do
        local key="$1"

        case $key in
            -g|--grep)
                grep="$2"
                shift # past argument
                shift # past value
            ;;
            -u|--user)
                user="$2"
                shift # past argument
                shift # past value
            ;;
            -c|-C|--cmd)
                cmd="$2"
                shift # past argument
                shift # past value
            ;;
            --help)
                help=1
            ;;
            *)    # unknown option
                POSITIONAL+=("$1") # save it in an array for later
                shift # past argument
            ;;
        esac
    done

    set -- "${POSITIONAL[@]}" # restore positional parameters

    if [ -z "$cmd" ]; then
        cmd="$1"
        shift
    fi

    local h=rss
    local a="$@"
    local e=

    # Show usage/help
    if [ -z "$cmd" -a -z "$grep" -a -z "$user" -a -z "$a" ] || [ -n "$help" ]; then
        echo "Usage:"
        echo "   psmem [-g grep] [-u user] ... [-c] command"
        echo "   psmem --help"
        echo ""
        echo '   All extra parameters go to `ps`'
        return 1
    fi

    if [ -n "$user" ]; then
        a="$a -A"
        h="user,$h"
        e="$e | awk '\$1 == \"$user\"' | cut -d' ' -f1 -s --complement"
        if [ -n "$cmd" ]; then
            h="$h,comm"
            e="$e | awk '\$2 == \"$cmd\"'"
        else
            [ -n "$grep" ] && h="$h,comm"
        fi
    else
        if [ -n "$cmd" ]; then
            a="$a -C '$cmd'"
        else
            a="$a -A"
        fi
        [ -n "$grep" ] && h="$h,comm"
    fi

    local e="ps --no-headers -o '$h' $a$e"
    [ -n "$grep" ] && e="$e | grep -v grep | grep -i '$grep'"
    if [ "$h" != "rss" ]; then
        cmd=`eval $e | awk '{print $2}' | sort | uniq -c | sort -k1 -nr | awk '{print "("$2" x"$1")"}'`
        e="$e | awk '{print \$1}'"
    else
        cmd=;
    fi

    echo -n "${cmd[@]}" "RAM: "
    a=`eval $e`
    h=`echo "${a[@]}" | wc -w`
    if [ "$h" -gt 0 ]; then
        echo -n `( IFS=$'\n'; echo "${a[@]}" ) | awk '{ sum+=$1 } END { printf ("%s%d%s", "~", sum/NR/1024,"M") }'` x$h" = "
        echo `( IFS=$'\n'; echo "${a[@]}" ) | awk '{ sum+=$1 } END { printf ("%d%s", sum/1024,"M") }'`
    else
        echo none
    fi
}

# @author DUzun.Me
function psmemo() {
    local p=$1
    local g=$2
    local h=rss # comm
    [ -n "$g" ] && h=$h,user

    list() {
        if [ -z "$g" ]; then
            ps --no-headers -o "$h" -C $p
        else
            ps --no-headers -o "$h" -C $p | grep $g
        fi
    }

    local c=`list | wc -l`
    echo -n \"$1\" "RAM: "
    if [ "$c" -gt 0 ]; then
        echo -n `list | awk '{ sum+=$1 } END { printf ("%s%d%s", "~", sum/NR/1024,"M") }'` x$c" = "
        echo `list | awk '{ sum+=$1 } END { printf ("%d%s", sum/1024,"M") }'`
    else
        echo none
    fi
}

# Import an /etc/passw line
# Eg. `impw 'duzun:x:1000:1000:Dumitru Uzun,,,,duzun.me:/home/duzun:/bin/bash'`
function impw() {
    local login=`echo $1 | cut -d: -f1`
    local uid=`echo $1 | cut -d: -f3`
    local gid=`echo $1 | cut -d: -f4`
    local comment=`echo $1 | cut -d: -f5`
    local home=`echo $1 | cut -d: -f6`
    local shell=`echo $1 | cut -d: -f7`
    shift

    useradd -u "$uid" -g "$gid" -d "$home" -s "$shell" -c "$comment" $@ "$login"
}

# ------------------------------------------------------------------------------
# This alias recursively destroys all .DS_Store files in the folder I am currently in
alias killDS="find . -type f -name '*.DS_Store' -ls -delete"

# Canonical hex dump; some systems have this symlinked
command -v hd > /dev/null || alias hd="hexdump -C"

# macOS has no `md5sum`, so use `md5` as a fallback
command -v md5sum > /dev/null || alias md5sum="md5"

# macOS has no `sha1sum`, so use `shasum` as a fallback
command -v sha1sum > /dev/null || alias sha1sum="shasum"

# ------------------------------------------------------------------------------
# $ .. [nr]
# @author DUzun.Me
function ..() {
    local i=$1
    if [ $# -eq 0 ]
    then
        i=1
    fi
    local LASTDIR=$PWD
    while [ $i -gt 0 ]
    do
        cd ..
        i=$(($i - 1))
    done
    export OLDPWD=$LASTDIR
}

alias ...='cd ../..'
alias ....='cd ../../..'

# cd up to "partial_str"
# $ up "partial_str"
function up {
    local up=`expr "$PWD" : "^\(.*$1[^/]*\)"`
    [ "x$up" = "x" ] || cd $up
}

# Create directory and cd to it
function mcd {
    mkdir -p "$@" && cd "$_"
}

# Sort for find file
function f() {
    find "$PWD" -type f -name $@
}

# One of @janmoesen’s ProTip™s
for method in GET HEAD POST PUT DELETE TRACE OPTIONS; do
    alias "${method}"="lwp-request -m '${method}'"
done

# Intuitive map function
# For example, to list all directories that contain a certain file:
# find . -name .gitattributes | map dirname
alias map="xargs -n1"

# randhex $byte_length
function randhex() {
    head -c${1:-32} /dev/urandom | hexdump -v -e '1/1 "%02x"'
}

# randtext $byte_length
function randtext() {
    head -c${1:-32} /dev/urandom | base64 | tr -d '='
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* ./*;
    fi;
}

# ------------------------------------------------------------------------------
# Create a data URL from a file
function dataurl() {
    local mimeType=$(file -b --mime-type "$1");
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8";
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# ------------------------------------------------------------------------------
# Show all the names (CNs and SANs) listed in the SSL certificate for a given domain
function getcertnames() {
    local domain=${1:-"`hostname`"};
    if [ -z "$domain" ]; then
        echo "ERROR: No domain specified.";
        return 1;
    fi;

    echo "Testing ${domain}…";
    echo ""; # newline

    local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
        | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

    if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
        local certText=$(echo "${tmp}" \
            | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
            no_serial, no_sigdump, no_signame, no_validity, no_version");
        echo "Common Name:";
        echo ""; # newline
        echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
        echo ""; # newline
        echo "Subject Alternative Name(s):";
        echo ""; # newline
        echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
            | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
        return 0;
    else
        echo "ERROR: Certificate not found.";
        return 1;
    fi;
}

# ------------------------------------------------------------------------------
_profile=`realpath ${BASH_SOURCE:-$0}`
_dotfiles=`dirname "$_profile"`

alias .update="( cd $_dotfiles && git pull && . $_dotfiles/.profile )"

[ -n "$_os" -a -f "$_dotfiles/.aliasrc.$_os" ] && . "$_dotfiles/.aliasrc.$_os";
[ -f ~/.extend.aliasrc ] && . ~/.extend.aliasrc;
