#!/bin/sh
#######################
# Functions & Aliases #
#######################

# ------------------------------------------------------------------------------
_alias=$(realpath "${BASH_SOURCE:-$0}")
_dotfiles=$(dirname "$_alias")

# ------------------------------------------------------------------------------
# Detect OS type
ostype() {
    local _os;

    case "$OSTYPE" in
        solaris*) _os=sun ;;
        darwin*)  _os=osx ;;
        linux*)   _os=linux ;;
        bsd*)     _os=bsd ;;
        msys*)    _os=windows ;;
        *)        _os=$(uname)
            case "$_os" in
                Linux*)           _os=linux ;;
                Darwin*)          _os=osx ;;
                FreeBSD|OpenBSD)  _os=bsd ;;
                SunOS)            _os=sun ;;
                MINGW32_NT*)      _os=windows ;;
                # *) declare -l _os; _os="$_os" ;;
                *) _os="${_os,,}" ;;
                # *) _os=$(echo "$_os" | awk '{print tolower($0)}') ;;
            esac
        ;;
    esac

    echo "$_os";
}

# ------------------------------------------------------------------------------
# Guess the shell type - doesn't quite work in subshells (when not your login shell)
shelltype() {
    if [ -n "$ZSH_NAME" ] || [ -n "$ZSH_VERSION" ]; then
        echo 'zsh'
    elif [ -n "${BASH_SOURCE:-}" ] || [ -n "$BASH" ]; then
        echo 'bash'
    else
        local s;
        s=$(realpath /proc/$$/exe); # it's safer to check real processes' path
        if [ -n "$s" ] && [ "$s" != "/proc/$$/exe" ] && [ -e "$s" ]; then
            # echo "${s##*/}"
            basename "$s"
        elif [ -n "$shell" ]; then
            # echo "${shell##*/}"
            basename "$shell"
        elif [ -n "$SHELL" ]; then
            basename "$(realpath "$SHELL")"
        else
            echo 'sh'; # unknown
            return 1;
        fi
    fi
}

# ------------------------------------------------------------------------------
# Test whether a glob has any matches
# https://stackoverflow.com/questions/2937407/test-whether-a-glob-has-any-matches-in-bash
exists() {
    # Bash
    if command -v compgen > /dev/null
    then
        compgen -G "$1" > /dev/null
        return $?
    fi

    # Exceptions
    case "$(shelltype)" in
        zsh)
            local f=$1
            if [ -e "$f" ] || [ -L "$f" ]; then return 0; fi

            # If $1 is a pattern, we have to expand it in zsh:
            local g
            g=$(setopt | grep nullglob)
            setopt nullglob
            set -- ${~f} 2> /dev/null
            [ -z "$g" ] && setopt +o nullglob
            [ "$f" = "$1" ] && return 1
            [ -e "$1" ] || [ -L "$1" ]
            return $?
        ;;
        # *) ;;
    esac

    # Non-Bash
    for f in $1; do
        ## Check if the glob gets expanded to existing files.
        ## If not, f here will be exactly the pattern above
        ## and the exists test will evaluate to false.
        [ -e "$f" ] || [ -L "$f" ]

        ## This is all we needed to know, so we can break after the first iteration
        return $?
    done
}

# Expand a glob
expand_glob() {
    # Bash
    if command -v compgen > /dev/null
    then
        while [ $# -ne 0 ]; do
            compgen -G "$1"
            shift
        done
        return $?
    fi

    local f

    # Exceptions
    case "$(shelltype)" in
        zsh)
            # If $1 is a pattern, we have to expand it in zsh:
            local g
            g=$(setopt | grep nullglob)
            setopt nullglob

            while [ $# -ne 0 ]; do
                ( for f in ${~1}; do echo "$f"; done ) || echo "$1"
                shift
            done
            local r=$?

            [ -z "$g" ] && setopt +o nullglob
            return $r
        ;;
        # *) ;;
    esac

    while [ $# -ne 0 ]; do
        # Non-Bash
        for f in $1; do
            echo "$f"
        done
        shift
    done
}

# Quote all the arguments with a single quote (').
# The end result is intended as an argument for a shell command.
# Eg.
# > quote_sh 1 2 3
# '1 2 3'
# > quote_sh 1 "'"2 3"'"
# '1 '"'"'2 3'"'"''
quote_sh() {
    echo "'$(echo "$@" | sed "s/'/'\"'\"'/g")'"
}

# ------------------------------------------------------------------------------
# bash only, but cool :-)
if_os () { [[ $OSTYPE == *$1* ]]; }
if_nix () {
    case "$OSTYPE" in
        *linux*|*hurd*|*msys*|*cygwin*|*sua*|*interix*) sys="gnu";;
        *bsd*|*darwin*) sys="bsd";;
        *sunos*|*solaris*|*indiana*|*illumos*|*smartos*) sys="sun";;
    esac
    [[ "${sys}" == "$1" ]];
}

# ------------------------------------------------------------------------------
# "Edit this file" command
alias aliasrc='edit ~/.aliasrc; . ~/.aliasrc'

# ------------------------------------------------------------------------------

# echo to stderr
echo_error() {
    >&2 echo "$@"
}

# ------------------------------------------------------------------------------
[ -n "$_os" ] || _os=$(ostype)

# ------------------------------------------------------------------------------
# Portable ls with colors
if ls --color -d . >/dev/null 2>&1; then
    alias ls='ls --color=auto'  # Linux
    # alias ls="ls --color=tty"
elif ls -G -d . >/dev/null 2>&1; then
    alias ls='ls -G'  # BSD/OS X
fi

alias la="ls -ahF"
alias ll="ls -lhF"
alias l='ll -a'
alias l.="ls -dh .*"

alias s='systemctl'
alias j='journalctl'
alias sud='sudo -s'
alias t='tail -n 100 -f'

## Colorize the grep command output for ease of use (good for log files)##
if echo | grep --color 2> /dev/null; then
    alias grep  > /dev/null 2>&1 || alias grep='grep --color=auto'
    alias egrep > /dev/null 2>&1 || alias egrep='egrep --color=auto'
    alias egrep > /dev/null 2>&1 || alias fgrep='fgrep --color=auto'
fi

alias nocmt="grep -Ev '^(#|$)'" # grep no comment

## df & du human readable
if [ "$_os" = "osx" ] || [ "$_os" = "bsd" ]; then
    alias df='df -H'
    alias dfh='df -Hl'
    # alias dft='df -Hl | head -1; df -Hl --total | grep total'
else
    alias df='df -h'
    alias dfh='df -hlT -x tmpfs -x devtmpfs -x overlay'
    alias dft='df -hl | head -1; df -hl -x tmpfs -x devtmpfs -x overlay --total | grep total'
fi

alias du='du -ch'
alias du1='du -d 1'
alias du0='du -d 0'
# alias dut='du -hsx * | sort -rh | head' # See fs() function below
alias dut='fs -h -x'

# _aliases_complete+=(
#     dfh du1 du0
# )

# Add safety nets:

## do not delete / or prompt if deleting more than 3 files at a time #
if rm --help 2> /dev/null | grep -q -- '--preserve-root';
then
    alias rm='rm -I --preserve-root'
fi

## Parenting changing perms on / #
if chown --help 2> /dev/null | grep -q -- '--preserve-root';
then
    alias chown='chown --preserve-root'
    alias chmod='chmod --preserve-root'
    alias chgrp='chgrp --preserve-root'
fi

## confirmation #
alias mv='mv -i'
alias cp='cp -i'
ln --help 2> /dev/null | grep -q -- '--interactive' && alias ln='ln -i'

# docker-compose
alias dcs="docker-compose -p \$(pwd | sed 's#[/.]#-#g; s/^-//g')"
alias dcsb="dcs build"
alias dcsu="dcs up -d"
alias dcsd="dcs down"

# _aliases_complete+=(
#     dcs dcsb dcsu dcsd
# )

# ------------------------------------------------------------------------------
command -v colordiff > /dev/null && alias diff='colordiff'

# Resume wget by default
command -v wget > /dev/null && alias wget='wget -c'

# ------------------------------------------------------------------------------
# Reload the shell (i.e. invoke as a login shell)
alias reload_shell="exec \${SHELL}"
alias reload="exec \"\$(realpath /proc/\$\$/exe)\" || exec \${SHELL}"

# Print each PATH entry on a separate line
alias path='echo -e ${PATH//:/\\n}'

# ------------------------------------------------------------------------------
# get error messages from journalctl
alias jctl="journalctl -p 3 -xb"


# ------------------------------------------------------------------------------
is_path() {
    local p
    p="${1%/}"
    [ -z "$p" ] && p="$1"
    # bash
    # sed 's/:/\n/g' <<<"$PATH" | grep -q "^$p/*\$"
    # POSIX
    echo "$PATH" | sed 's/:/\n/g' | grep -q "^$p/*\$"
}

add_path() {
    ! is_path "$1" && [ -d "$1" ] && export PATH="$1:$PATH"
}
path_add() {
    ! is_path "$1" && [ -d "$1" ] && export PATH="$PATH:$1"
}

del_path() {
    local p
    p="${1%/}"
    [ -z "$p" ] && p="$1"
    if is_path "$p";
    then
        export PATH;
        # bash
        # PATH=$(sed 's/:/\n/g' <<<"$PATH" | grep -v "^$p/*\$" | sed '{ :q;N;s/\n/:/g;t q }')
        # POSIX
        PATH=$(echo "$PATH" | sed 's/:/\n/g' | grep -v "^$p/*\$" | sed '{ :q;N;s/\n/:/g;t q }')
    fi
}

# Stop after sending count ECHO_REQUEST packets #
alias ping='ping -c 5'

alias netports="netstat -tulapn"


# Wait for a process to end by its PID
wait_pid() {
    local pid=$1
    local interval="${2:-1}"
    while kill -0 "$pid" &> /dev/null; do sleep "$interval"; done
}

# Wait for a process to end by its name/path
wait_proc() {
    local pid
    pid=$(pidof "$1") || return $?
    shift
    echo "PID $pid"
    wait_pid "$pid" "$@"
}

# Watch a folder and rsync files to a destination on change
watchnsync() {
    # Requires inotify-tools
    if ! command -v inotifywait >/dev/null; then
        echo >&2 "inotifywait not found"
        echo >&2 "Please install inotify-tools first!"
        return 1
    fi

    local remoteDir="$1"
    shift

    if [ -z "$remoteDir" ]; then
        echo >&2 "Usage: ( cd <baseDir> && watchnsync <remoteDir>/ { <watchDir>/ }"
        return 2
    fi

    local watchDir="${1:-./}"
    shift

    if [ ! -e "$watchDir" ]; then
        echo >&2 "Watch directory doesn't exist: $watchDir"
        return 3
    fi

    watchDir=$(realpath "$watchDir")

    local exclude="node_modules|vendor|.git|cache|tmp"

    [ "$(echo "$remoteDir" | cut -c "${#remoteDir}")" = '/' ] || remoteDir="$remoteDir/"
    [ "$(echo "$watchDir" | cut -c "${#watchDir}")" = '/' ] || watchDir="$watchDir/"

    while i=$(inotifywait -qr \
        -e modify \
        -e create \
        `# -e move` \
        `# -e attrib` \
        --exclude "$exclude" \
        "$watchDir" \
        | cut -c "${#watchDir}-" \
        | sed -r 's#^/(.*/)? (MODIFY|CREATE) ([^/].*)$#\2 \1\3#' \
    ); do
        set -- $i
        local evt="$1"
        shift
        local file="$*"
        local src="$watchDir$file"
        local dst="$remoteDir$file"

        echo
        echo "$evt $src"

        case $evt in
            MODIFY|CREATE)
                # --mkpath was added in rsync v3.2.3
                rsync -rlptzzsDhP --mkpath "$src" "$dst"
            ;;
            *)
                echo >&2 "evt $evt ($i) not implemented yet"
            ;;
        esac
    done
}

## Get cpu info ##
if command -v lscpu > /dev/null;
then
    alias cpuinfo='lscpu'
else
    alias cpuinfo='less /proc/cpuinfo'
fi

alias cpucount='getconf _NPROCESSORS_ONLN'


# Import an /etc/passw line
# Eg. `impw 'duzun:x:1000:1000:Dumitru Uzun,,,,duzun.me:/home/duzun:/bin/bash'`
impw() {
    local login=$(echo "$1" | cut -d: -f1)
    local uid=$(echo "$1" | cut -d: -f3)
    local gid=$(echo "$1" | cut -d: -f4)
    local comment=$(echo "$1" | cut -d: -f5)
    local home=$(echo "$1" | cut -d: -f6)
    local shell=$(echo "$1" | cut -d: -f7)
    shift

    useradd -u "$uid" -g "$gid" -d "$home" -s "$shell" -c "$comment" "$@" "$login"
}

# ------------------------------------------------------------------------------
alias root="sudo -i"
command -v su > /dev/null || alias su="sudo -i"

# Execute a command with "sudo" if not under root
# `sudoif -v` only echo the command to be executed
sudoif() {
    local _view
    if [ "$1" == "-v" ]; then
        _view=1
        shift
    fi

    local uid="${UID:-$(id -u)}"
    [ "$uid" -ne "0" ] && set -- $(alias_expand "sudo") "$@"
    if [ -n "$_view" ]; then
        echo "$@"
    else
        "$@"
    fi
}

# reboot / halt / poweroff
if [ "${UID:-$(id -u)}" != "0" ]; then
    alias reboot > /dev/null 2>&1 || alias reboot='sudo /sbin/reboot'
    alias poweroff='sudo /sbin/poweroff'
    alias halt='sudo /sbin/halt'
    alias shutdown='sudo /sbin/shutdown'

    command -v compsize > /dev/null && alias compsize="sudo compsize"
fi

# ------------------------------------------------------------------------------
# This alias recursively destroys all .DS_Store files in the folder I am currently in
alias killDS="find . -type f -name '*.DS_Store' -ls -delete"

# Canonical hex dump; some systems have this symlinked
command -v hd > /dev/null || alias hd="hexdump -C"

# macOS has no `md5sum`, so use `md5` as a fallback
command -v md5sum > /dev/null || alias md5sum="md5"

# macOS has no `sha1sum`, so use `shasum` as a fallback
command -v sha1sum > /dev/null || alias sha1sum="shasum"

# Generate sha1 digest
alias sha1="openssl sha1 | cut -d' ' -f2"

# Start calculator with math support
alias bc='bc -l'

# Short for <find file>
f() {
    find "$PWD" -type 'f' -name "$@"
}

# Get common part of two string at the beginning
str_common_part() {
    local s="$1"
    local t="$2"
    local l=1
    local n=${#s}

    while [ "${t#${s:0:$l}}" != "$t" ] && [ "$l" -lt $(( n + 1 )) ]; do
        (( l = l + 1 ))
    done
    (( l = l - 1 ))

    echo "${s:0:$l}"

    if [ "$l" -eq 0 ]; then return 1; fi
}

# Normalize a path string
normpath() {
    # local ret="${1//\/\.\//\/}"
    local ret="$1"
    ret=$(echo "$ret" | sed -r 's#/\./#/#g')
    ret=$(echo "$ret" | sed -r 's#/\.$##g' )
    ret=$(echo "$ret" | sed -r 's#^\./##g')
    ret=$(echo "$ret" | sed -r 's#[^\./]+/\.\.(/|$)##g')
    # @TODO: /path/with/.dot/../or./../or.eve.in.the.middle/.. -> /path/with/

    echo "$ret";
}

# Returns relative path from $1/$source to $2/$target
relpath() {
    local source target common_part ret

    source=$(normpath "$1")
    target=$(normpath "$2")

    if [ "${source: -1}" != "/" ]; then source="$source/"; fi

    common_part=$(str_common_part "$source" "$target")

    if [ -z "$common_part" ]; then
        echo "$target";
        return 1;
    fi

    if [ "${common_part: -1}" != "/" ]; then common_part="${common_part%/*}/"; fi

    # bash
    # ret=$(sed -r 's#[^\/]+\/#../#g' <<< "${source:${#common_part}}")
    # POSIX
    ret=$(echo "${source:${#common_part}}" | sed -r 's#[^\/]+\/#../#g')
    echo "$ret${target:${#common_part}}";
}


# One of @janmoesen’s ProTip™s
for method in GET HEAD POST PUT DELETE TRACE OPTIONS; do
    alias "${method}"="lwp-request -m '${method}'"
done

# cURL with Cookies
alias ccurl="curl -b /tmp/cookie_curl.txt -c /tmp/cookie_curl.txt"
alias ccurl_edit="command \${EDITOR_PATH:-\$EDITOR} /tmp/cookie_curl.txt"
# _aliases_complete+=(
#     ccurl
# )
# alias_completion ccurl

# Download first argument to stdout
if command -v curl > /dev/null; then
    alias download="curl -sS"
elif command -v wget > /dev/null; then
    alias download="wget -qO-"
## Could use GET alias defined above, but it doesn't support HTTPS by default
# else
#     alias download="GET"
fi;

# Download from FTP
if command -v wget > /dev/null; then
    # --ftp-user=<ftp_user> --ftp-password=<ftp_pwd>
    alias downftp="wget -qr -nH -m"
fi;

# Intuitive map function
# For example, to list all directories that contain a certain file:
# find . -name .gitattributes | map dirname
alias map="xargs -n1"

# diff two binary files
diffbin() {
    cmp -l "$1" "$2" | gawk '{printf "%08X %02X %02X\n", $1-1, strtonum(0$2), strtonum(0$3)}'
}

# bin2hex pipe
alias bin2hex="hexdump -v -e '1/1 \"%02x\"'"

# randhex $byte_length
randhex() {
    head -c${1:-32} /dev/urandom | hexdump -v -e '1/1 "%02x"'
}

# randtext $byte_length
randtext() {
    head -c${1:-32} /dev/urandom | base64 | tr -d '=' | tr '+/' '-_'
}

# ------------------------------------------------------------------------------
# Make sure there is the `code` command, even when only vscodium is installed
if command -v vscodium > /dev/null && ! command -v code > /dev/null; then
    alias code="vscodium"
fi

# Open editor (no wait)
edit() {
    if [ -f "$EDITOR_PATH" ]; then
        command "$EDITOR_PATH" $EDITOR_ARGS "$@";
    else
        echo "Editor not found (\$EDITOR_PATH='$EDITOR_PATH')";
        return 255;
    fi;
}

# Overwrite contents and then remove file
overdel() {
    p="$(realpath "$1")"
    find "$p" -type 'f' | while read -r i; do
        # s=`du -sb "$i" | head -1 | awk '{print $1}'`;
        s=$(wc -c < "$i");
        echo "$s > $i";
        head -c "$s" < /dev/urandom > "$i";
        rm -rf -- "$i";
    done;
}

_rm_dir_ask() {
    local dir=$1
    local forced=$2
    if [ -z "$dir" ]; then
        >&2 echo "No folder path provided"
        return 1
    fi

    if [ ! -d "$dir" ]; then
        >&2 echo "Folder not found: $dir"
        return 2
    fi

    if [ -z "$forced" ]; then
        echo "Are you sure you want to delete all files in $dir?"
        read -p " [Y/n]" -n 1 -r;
        echo "";
        if [[ ! "${REPLY:-Y}" =~ ^[Yy]$ ]]; then
            return 10;
        fi
    fi
}

rm_all() {
    local forced
    if [ "$1" = "-f" ]; then
        forced=1
        shift
    fi

    [ "$1" == "--" ] && shift

    local dir=$1
    _rm_dir_ask "$dir" "$forced"

    case $? in
        1)
            >&2 echo "  rm_all [-f] <dir_name>"
            return 1
        ;;
        0) ;;
        *) return $?;;
    esac;

    # ( cd "$dir" && perl -e 'for(<*>){unlink}' ) # this is not recursive
    # find "$dir" -type f -exec ionice -c3 rm {} + # this does not remove subfolders
    mkdir -p /tmp/_rm_all_empty && rsync -a --delete /tmp/_rm_all_empty/ "$dir/" && rm -rf /tmp/_rm_all_empty # this might be faster, uses more CPU, requires an extra step of creating an empty folder
}

rm_all_slow() {
    local forced
    if [ "$1" = "-f" ]; then
        forced=1
        shift
    fi

    [ "$1" == "--" ] && shift

    local dir=$1
    _rm_dir_ask "$dir" "$forced"

    case $? in
        1)
            >&2 echo "  rm_all [-f] <dir_name>"
            return 1
        ;;
        0) ;;
        *) return $?;;
    esac;

    # find "${dir:?}" -type f -exec ionice -c3 rm {} + # this is faster, but also may yield high CPU
    find "${dir:?}" -type f -exec ionice -c3 rm {} \; && \
    rm -rf -- "${dir:?}"/*
}

# Determine size of a file or total size of a directory
fs() {
    if [ "$1" = "--help" ]; then
        cat << EOH
Usage: fs [-s | -h [-<number>]] [-<du_options>] [<path> | <glob>]
Determine size of a file or total size of a directory

Options:
    -s, --sort    Sort results by size
    -h, --head    Show only first results, sorted by size

You can also pass any \`du\` options before the <path> | <glob>,
except '-sh', which are set anyways.

Example:
    fs
        List file sizes for all files and folders in current folder
    fs -s
        List file sizes for all files and folders in current folder, sorted by size
    fs -h -7
        List top 7 files and folders in current folder, sorted by size
    fs /var/log/nginx
        Folder size
    fs -- /var/log/nginx/*
        List file sizes for all non-hidden files and folders in /var/log/nginx/
    fs -x /tmp/
        Folder size, skip directories on different file systems (see \`du --help\`)
EOH
        return 0
    fi

    if [ "$1" = "-s" ] || [ "$1" = "--sort" ]; then
        shift
        # Detect --human sort support
        if ( sort --help | grep -- '--human' ) > /dev/null 2>&1; then
            fs "$@" | sort -rh
        else
            fs "$@" | sort -rn
        fi
        return $?
    fi

    local arg
    if [ "$1" = "-h" ] || [ "$1" = "--head" ] || [ "$1" = "--top" ]; then
        shift
        arg=-10
        # -<number> arguments go to `head`, except '-0'
        if [ "${1:0:1}" = "-" ] && [ "$1" -lt 0 ] 2> /dev/null ; then
            arg="$1"
            shift
        fi
        fs -s "$@" | head "$arg"
        return $?
    fi

    # Detect --apparent-size support of `du`
    if du -b --exclude='*' /dev/null > /dev/null 2>&1; then
        arg=-sbh;
    else
        arg=-sh;
    fi

    # Gather du options
    while [ "${1:0:1}" = "-" ] && [ "$1" != "--" ]; do
        arg="$arg $1"
        shift
    done
    [ "$1" = "--" ] && shift

    # We need a files list separator --
    arg="$arg --"

    # If no files arguments, assume all files in current folder
    if [ $# -eq 0 ]; then
        arg="$arg $( \
            ( \
                exists '.[!.]*' && expand_glob '.[!.]*'; \
                exists '*' && expand_glob '*' \
            ) | while read -r f; do quote_sh "$f"; done \
            | tr "\n" " "
        )"
    else
        while [ $# -ne 0 ]; do
            arg="$arg $(quote_sh "$1")"
            shift
        done
    fi

    eval "du $arg";
    # du "${arg[@]}" "$@";
}

command -v filesize > /dev/null || alias filesize="wc -c <"

# File age (since last modification)
filemage() {
    local fm ts
    ts=$(date "+%s")
    if ! fm=$(stat -c '%Y' "$1" 2> /dev/null) || [ -z "$fm" ]; then return 1; fi

    echo $(( ts - fm ))
}

# Convert a number to memory unit (K, M, G)
mem_unit() {
    local sum=${1:-$(cat)}
    local unit=B
    if [ "$sum" -gt 1024 ]; then
        sum=$(( sum / 1024 ))
        unit=K
        if [ $sum -gt 1024 ]; then
            sum=$(( sum / 1024 ))
            unit=M
            if [ $sum -gt 1024 ]; then
                sum=$(( sum / 1024 ))
                unit=G
            fi
        fi
    fi
    echo "$sum$unit"
}

# ------------------------------------------------------------------------------
#
# # ex - archive extractor
# # usage: ex <file>
ex() {
  if [ -f "$1" ] ; then
    case $1 in
      *.tar.bz2)   tar xjf "$1"   ;;
      *.tar.gz)    tar xzf "$1"   ;;
      *.tar.xz)    tar xJf "$1"   ;;
      *.tar.zst)   unzstd "$1"    ;;
      *.tar)       tar xf "$1"    ;;
      *.tbz2)      tar xjf "$1"   ;;
      *.tgz)       tar xzf "$1"   ;;
      *.bz2)
            if command -v pbzip2 > /dev/null;
            then pbzip2 -k -d "$1";
            else bunzip2 -k -d "$1";
            fi
        ;;
      *.gz)
            if command -v pigz > /dev/null;
            then pigz -k -d "$1"
            else gunzip -k -d "$1"
            fi
        ;;
      *.rar)       unrar x "$1"   ;;
      *.zip)       unzip -o "$1"  ;;
      *.Z)         uncompress "$1";;
      *.7z)        7z x "$1"      ;;
       *.deb)      ar x "$1"      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    >&2 echo "'$1' is not a valid file"
  fi
}
# ------------------------------------------------------------------------------
# translit "стринг"
# echo "текст" | translit
# translit <<< "стдин"
translit() {
    local NAME=${*:-$(cat)};
    local TRS;
    TRS=$(echo "$NAME" | sed "y/абвгдезийклмнопрстуфхцы/abvgdezijklmnoprstufxcy/")
    TRS=$(echo "$TRS" | sed "y/АБВГДЕЗИЙКЛМНОПРСТУФХЦЫ/ABVGDEZIJKLMNOPRSTUFXCY/")
    TRS=${TRS//ч/ch};
    TRS=${TRS//Ч/CH} TRS=${TRS//ш/sh};
    TRS=${TRS//Ш/SH} TRS=${TRS//ё/jo};
    TRS=${TRS//Ё/JO} TRS=${TRS//ж/zh};
    TRS=${TRS//Ж/ZH} TRS=${TRS//щ/sh\'};
    TRS=${TRS///SH\'} TRS=${TRS//э/je};
    TRS=${TRS//Э/JE} TRS=${TRS//ю/ju};
    TRS=${TRS//Ю/JU} TRS=${TRS//я/ja};
    TRS=${TRS//Я/JA} TRS=${TRS//ъ/\`};
    TRS=${TRS//ъ\`} TRS=${TRS//ь/\'};
    TRS=${TRS//Ь/\'}
    command -v iconv > /dev/null && TRS=$(echo "$TRS" | iconv -c -f UTF8 -t ASCII//TRANSLIT)
    echo "$TRS";
}

# ------------------------------------------------------------------------------
lowercase() {
    # echo "$1" | sed "y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/" # ACII only
    # echo "${@,,}" # bash
    echo "${@:-$(cat)}" | awk '{print tolower($0)}'
}

# ------------------------------------------------------------------------------
# Strip whitespace (or other characters) from the beginning and end of a string
# eg. echo "  x " | trim          -> "x"
# eg. echo "..x." | trim '.'      -> "x"
# eg. echo ".,x.," | trim '.' ',' -> ",x."
trim() {
    local l r
    if [ $# -eq 0 ]; then
        sed -r 's/^[[:space:]]*//g; s/[[:space:]]*$//g'
    else
        l=${1}
        r=${2:-$1}
        sed -r "s/^[$l]*//g; s/[$r]*\$//g"
    fi
}

# ------------------------------------------------------------------------------
# open_url some-file-from-windows.url
open_url() {
    if [ $# -eq 0 ]; then
        echo "open_url <path/to/file.url>"
        return 1;
    fi

    _url="${1}"
    _u=$(grep '^URL=' "$_url")

    if [ -z "$_u" ]; then
        echo "open_url: Wrong file format"
        return 2
    fi

    _u="${_u:4}"

    for i in 'open' xdg-open google-chrome google-chrome-stable firefox;
    do
        if command -v "$i" > /dev/null; then
            _o="$i";
            break;
        fi
    done

    eval "$_o '$_u'"
}

# ------------------------------------------------------------------------------
abs_url() {
    local url=$1
    case $url in
        http://*|https://*|ftp://*|file:///*)
            echo "$url"
        ;;
        //*)
            local base=${2%*/}
            echo "${base%*://*}:$url"
        ;;
        # /*) echo "${base%*://*}:$url" ;;
        *) echo "$(dirname "$2".)/$url" ;;
    esac
}

# ------------------------------------------------------------------------------
localip() {
    ip route show | grep -v linkdown | grep -v 'br-' | awk -F'src ' '/src/ { print $2 }' | tail -1 | cut -d' ' -f1
}

# ------------------------------------------------------------------------------
# Create a data URL from a file
dataurl() {
    local mimeType;
    mimeType=$(file -b --mime-type "$1");
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8";
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# ------------------------------------------------------------------------------
# Show all the names (CNs and SANs) listed in the SSL certificate for a given domain
getcertnames() {
    local tmp;
    local domain=${1:-$(hostname)};
    if [ -z "$domain" ]; then
        echo "ERROR: No domain specified.";
        return 1;
    fi;

    echo "Testing ${domain}…";
    echo ""; # newline

    tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
        | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

    if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
        local certText;
        certText=$(echo "${tmp}" \
            | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
            no_serial, no_sigdump, no_signame, no_validity, no_version");
        echo "Common Name:";
        echo ""; # newline
        echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
        echo ""; # newline
        echo "Subject Alternative Name(s):";
        echo ""; # newline
        echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
            | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
        return 0;
    else
        echo "ERROR: Certificate not found.";
        return 1;
    fi;
}

# ------------------------------------------------------------------------------
# https://stackoverflow.com/a/38463476/1242333
getspfranges() {
    domainsToDig=$(dig @8.8.8.8 "_spf.$1" TXT +short | \
    sed \
        -e 's/"v=spf1//' \
        -e 's/ ~all"//' \
        -e 's/ include:/\n/g' | \
    tail -n+2)
    for domain in $domainsToDig ; do
        dig @8.8.8.8 "$domain" TXT +short | \
            sed \
                -e 's/"v=spf1//' \
                -e 's/ ~all"//' \
                -e 's/ ip.:/\n/g' | \
            tail -n+2
    done
}

# Get Googles' IPs
getgoogleranges() {
    getspfranges google.com
}

# ------------------------------------------------------------------------------
# Show the map
alias mapscii="telnet mapscii.me"

# ------------------------------------------------------------------------------
# syncthing rename: Rename files restored from .stversion
strename() {
    o=$(realpath -- "$1")
    d=$(dirname "$o")
    b=$(basename "$o")
    n=$(echo "$b" | sed -r 's/^(.+)\~[0-9]{8,8}\-[0-9]{6,6}(\..+)?/\1\2/; s/^\~[0-9]{8,8}\-[0-9]{6,6}(\..+)/\1/');

    if [ -d "$o" ]; then
        ( shopt -s dotglob && cd "$o" && for i in *; do strename "$i"; done; );
    fi;

    if [[ "$n" != "$b" ]]; then
        echo "$d: $b -> $n";
        mv -- "$o" "$d/$n";
    fi;
}

# ------------------------------------------------------------------------------
# Add to path npm's bin folder
npmbin() {
    local npmbin;
    npmbin=${PWD:-$(pwd)}/node_modules/.bin;
    add_path "$npmbin" && echo "$npmbin";
    return $?;
}


# Add to path composer's bin folder
composerbin() {
    local composerbin return

    # Global
    composerbin=~/.composer/vendor/bin;
    add_path "$composerbin" # && echo "$composerbin";
    return=$?

    # If only global, return here
    [ "$1" = "-g" ] && return "$return"

    # Local
    composerbin=${PWD:-$(pwd)}/vendor/bin;
    add_path "$composerbin" && echo "$composerbin";
    return $?;
}

# ------------------------------------------------------------------------------
